#!/bin/bash
# Copyright (C) 1996-2009 ChinaTelecom, Inc. all rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# contact:fjzhangwc@chinatelecom.cn

. /etc/init.d/functions

cd /etc/sysconfig/network-scripts
. ./network-functions

CONFIG=$1
need_config "$CONFIG"
source_config

if [ "$PEER_OUTER_IPADDR" = "$PEER_INNER_IPADDR" ]; then
    # Specifying PEER_INNER_IPADDR would automatically add a route to the peer
    # through the tunnel, redirecting tunnel packets back to the tunnel and
    # creating a dead loop.
    unset PEER_INNER_IPADDR
fi

case "$TYPE" in
VXLAN)
    MODE=vxlan
    proto=-4
    ;;
*)
    net_log $"Invalid vxlan type $TYPE"
    exit 1
    ;;
esac

# Create the tunnel
# The outer addresses are those of the underlying (public) network.
dstport=4789
if [ -n "$PEER_OUTER_PORT" ]; then
    dstport=$PEER_OUTER_PORT
fi

if  [ -n "$PEER_OUTER_PORT" ]; then
  outerInt=$PEER_OUTER_INT
  /sbin/ip link add $DEVICE type vxlan id $VNI remote $PEER_OUTER_IPADDR dstport $dstport srcport 4789 4789 dev $outerInt
else
  /sbin/ip link add $DEVICE type vxlan id $VNI remote $PEER_OUTER_IPADDR dstport $dstport srcport 4789 4789
fi

/sbin/ip link set $DEVICE up

# If the device is part of a bridge, add the device to the bridge
if [ -n "${BRIDGE}" ] && [ -x /usr/sbin/brctl ]; then
    if [ ! -d /sys/class/net/${BRIDGE}/bridge ]; then
        /usr/sbin/brctl addbr -- ${BRIDGE} 2>/dev/null
    fi
    /sbin/ip addr flush dev ${DEVICE} 2>/dev/null
    /sbin/ip link set dev ${DEVICE} up
    ethtool_set
    [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}
    /usr/sbin/brctl addif -- ${BRIDGE} ${DEVICE}
    # add the bits to setup driver parameters here
    for arg in $BRIDGING_OPTS ; do
        key=${arg%%=*};
        value=${arg##*=};
        echo $value > /sys/class/net/${DEVICE}/brport/$key
    done
    # Upon adding a device to a bridge,
    # it's necessary to make radvd reload its config
    [ -r /var/run/radvd/radvd.pid ] && kill -HUP $(cat /var/run/radvd/radvd.pid)
    exit 0

fi


if [ -n "$MY_INNER_IPADDR" ]; then
    ifconfig $DEVICE $MY_INNER_IPADDR up
fi

if [ -n "$MY_INNER_GATEWAY" ]; then
    if [ -n "$MY_INNER_TABLEID" ]; then
        /sbin/ip route add default via $MY_INNER_GATEWAY table $MY_INNER_TABLEID
    else
        /sbin/ip route add default via $MY_INNER_GATEWAY
    fi
fi


# IPv6 initialisation?
/etc/sysconfig/network-scripts/ifup-ipv6 ${CONFIG}

exec /etc/sysconfig/network-scripts/ifup-post "$CONFIG" "$2"
